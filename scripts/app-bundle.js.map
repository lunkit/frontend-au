{"version":3,"sources":["app.js","environment.js","main.js","meh.js","view.js","welcome.js","resources/index.js","resources/elements/create-lunk.js","/home/jared/web/lunkproject/frontend-au/src/resources/elements/loading-indicator.js","/home/jared/web/lunkproject/frontend-au/src/app.html","/home/jared/web/lunkproject/frontend-au/src/meh.html","/home/jared/web/lunkproject/frontend-au/src/view.html","/home/jared/web/lunkproject/frontend-au/src/welcome.html","/home/jared/web/lunkproject/frontend-au/src/resources/elements/create-lunk.html"],"names":["App","configureRouter","config","router","title","options","pushState","root","map","route","name","moduleId","nav","mapUnknownRoutes","debug","testing","api","baseUrl","configure","Promise","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","welcome","env","openpgp","httpClient","View","lunk","password","decodedLunk","noLunk","activate","params","routeConfig","getLunk","path","replace","create","created","sendLunk","message","fetch","default","response","json","data","status","window","location","hash","decode","readArmored","decrypt","console","log","plaintext","encrypted","read","format","CreateLunk","lunkId","randomString","encryptMessage","passwords","encrypt","ciphertext","lunkIt","expire","views","method","body","length","charset","i","result","crypto","getRandomValues","values","Uint32Array"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {RouterConfiguration, Router} from 'aurelia-router';\n\nexport class App {\n  configureRouter(config: RouterConfiguration, router: Router) {\n    config.title = 'Lunk';\n    config.options.pushState = true;\n    config.options.root = '/';\n    config.map([\n      {route: ['', 'welcome'], name: 'welcome', moduleId: 'welcome', nav: true, title: 'Create a Lunk!'},\n      {route: 'meh', name: 'meh', moduleId: 'meh', title: 'Meh'}\n    ]);\n\n    config.mapUnknownRoutes('view');\n    this.router = router;\n  }\n}\n","export default {\n  debug: true,\n  testing: true,\n  api: 'http://lunk.jared.tm',\n  baseUrl: 'http://flunk.jared.tm'\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export class welcome {\n  constructor() {\n  }\n}\n","import {HttpClient} from 'aurelia-fetch-client';\nimport * as env from 'environment';\nimport * as openpgp from 'openpgp';\n\n\nlet httpClient = new HttpClient();\n\nexport class View {\n\n  constructor() {\n    this.lunk = null;\n    this.password = null;\n    this.decodedLunk = 'Please Enter Password to view Message.';\n    this.noLunk = false;\n  }\n\n  activate(params, routeConfig) {\n    this.getLunk(params.path.replace('/', ''));\n  }\n\n  create() {\n    this.created = true;\n    this.sendLunk(this.message);\n    //this.encryptMessage(this.message);\n    //Send the message to the server\n    //Get the response back and display the lunk created view\n  }\n\n\n  getLunk(lunk) {\n    httpClient.fetch(`${env.default.api}/lunk/${lunk}`)\n    .then(response => response.json())\n    .then(data =>{\n      if (data.status === 'success') {\n        this.lunk = data.lunk;\n        if (window.location.hash) {\n          this.password = window.location.hash.replace('#', '');\n          this.decode();\n        }\n      } else {\n        this.noLunk = true;\n        this.lunk = data.message;\n      }\n    });\n  }\n\n  decode() {\n    let options = {\n      message: openpgp.message.readArmored(this.lunk), // parse armored message\n      password: this.password                         // decrypt with password\n    };\n    openpgp.decrypt(options).then(plaintext => {\n      console.log(plaintext.data);\n      this.decodedLunk = plaintext.data;\n    });\n  }\n\n}\n","import openpgp from 'openpgp';\n\nexport class welcome {\n  constructor() {\n  }\n\n  decrypt(encrypted) {\n    let options = {\n      message: openpgp.message.read(encrypted), // parse encrypted bytes\n      password: 'secret stuff', // decrypt with password\n      format: 'binary' // output as Uint8Array\n    };\n\n    openpgp.decrypt(options).then(function(plaintext) {\n      console.log(plaintext.data);\n      console.log('^^^^^-^^^^^^^');\n      return plaintext.data; // Uint8Array([0x01, 0x01, 0x01])\n    });\n  }\n\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import {HttpClient, json} from 'aurelia-fetch-client';\nimport * as env from 'environment';\nimport openpgp from 'openpgp';\n\nlet httpClient = new HttpClient();\n\nexport class CreateLunk {\n\n  constructor() {\n    this.message = '';\n    this.created = false;\n    this.lunkId = null;\n    this.baseUrl = env.default.baseUrl;\n    this.password = '';\n    console.log(env.default.api);\n  }\n\n  create() {\n    this.created = true;\n    console.log(this.message);\n    this.password = this.randomString(64);\n    this.encryptMessage(this.message, this.password).then( (encrypted) => {\n      this.sendLunk(encrypted);\n    });\n    //this.sendLunk(this.message);\n  }\n\n  encryptMessage(message, password) {\n    let options = {\n      data: message, // input as String\n      passwords: password // multiple passwords possible\n    };\n\n    return openpgp.encrypt(options).then(function(ciphertext) {\n      let encrypted = ciphertext.data; // '-----BEGIN PGP MESSAGE ... END PGP MESSAGE-----'\n      return encrypted;\n    });\n  }\n\n  sendLunk(lunk) {\n    let lunkIt = {\n      lunk: lunk,\n      expire: 10080,\n      views: 1\n    };\n    httpClient.fetch(`${env.default.api}/lunk`, {\n      method: 'post',\n      body: json(lunkIt)\n    }).then(response => response.json())\n    .then(data =>{\n      if (data.status === 'success') {\n        this.lunkId = data.lunkId;\n      }\n      console.log(data);\n    });\n  }\n\n  randomString(length) {\n    let charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let i;\n    let result = '';\n    if (window.crypto && window.crypto.getRandomValues) {\n      let values = new Uint32Array(length);\n      window.crypto.getRandomValues(values);\n      for (i = 0; i < length; i++) {\n        result += charset[values[i] % charset.length];\n      }\n      return result;\n    }\n  }\n\n}\n",null,null,null,null,null,null],"sourceRoot":"../src"}